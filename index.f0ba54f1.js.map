{"mappings":"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","sources":["node_modules/image-capture/src/imagecapture.js","scripts.js"],"sourcesContent":["/**\n * MediaStream ImageCapture polyfill\n *\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let ImageCapture = window.ImageCapture;\n\nif (typeof ImageCapture === 'undefined') {\n  ImageCapture = class {\n\n    /**\n     * TODO https://www.w3.org/TR/image-capture/#constructors\n     *\n     * @param {MediaStreamTrack} videoStreamTrack - A MediaStreamTrack of the 'video' kind\n     */\n    constructor(videoStreamTrack) {\n      if (videoStreamTrack.kind !== 'video')\n        throw new DOMException('NotSupportedError');\n\n      this._videoStreamTrack = videoStreamTrack;\n      if (!('readyState' in this._videoStreamTrack)) {\n        // Polyfill for Firefox\n        this._videoStreamTrack.readyState = 'live';\n      }\n\n      // MediaStream constructor not available until Chrome 55 - https://www.chromestatus.com/feature/5912172546752512\n      this._previewStream = new MediaStream([videoStreamTrack]);\n      this.videoElement = document.createElement('video');\n      this.videoElementPlaying = new Promise(resolve => {\n        this.videoElement.addEventListener('playing', resolve);\n      });\n      if (HTMLMediaElement) {\n        this.videoElement.srcObject = this._previewStream;  // Safari 11 doesn't allow use of createObjectURL for MediaStream\n      } else {\n        this.videoElement.src = URL.createObjectURL(this._previewStream);\n      }\n      this.videoElement.muted = true;\n      this.videoElement.setAttribute('playsinline', ''); // Required by Safari on iOS 11. See https://webkit.org/blog/6784\n      this.videoElement.play();\n\n      this.canvasElement = document.createElement('canvas');\n      // TODO Firefox has https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\n      this.canvas2dContext = this.canvasElement.getContext('2d');\n    }\n\n    /**\n     * https://w3c.github.io/mediacapture-image/index.html#dom-imagecapture-videostreamtrack\n     * @return {MediaStreamTrack} The MediaStreamTrack passed into the constructor\n     */\n    get videoStreamTrack() {\n      return this._videoStreamTrack;\n    }\n\n    /**\n     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-getphotocapabilities\n     * @return {Promise<PhotoCapabilities>} Fulfilled promise with\n     * [PhotoCapabilities](https://www.w3.org/TR/image-capture/#idl-def-photocapabilities)\n     * object on success, rejected promise on failure\n     */\n    getPhotoCapabilities() {\n      return new Promise(function executorGPC(resolve, reject) {\n        // TODO see https://github.com/w3c/mediacapture-image/issues/97\n        const MediaSettingsRange = {\n          current: 0, min: 0, max: 0,\n        };\n        resolve({\n          exposureCompensation: MediaSettingsRange,\n          exposureMode: 'none',\n          fillLightMode: 'none',\n          focusMode: 'none',\n          imageHeight: MediaSettingsRange,\n          imageWidth: MediaSettingsRange,\n          iso: MediaSettingsRange,\n          redEyeReduction: false,\n          whiteBalanceMode: 'none',\n          zoom: MediaSettingsRange,\n        });\n        reject(new DOMException('OperationError'));\n      });\n    }\n\n    /**\n     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-setoptions\n     * @param {Object} photoSettings - Photo settings dictionary, https://www.w3.org/TR/image-capture/#idl-def-photosettings\n     * @return {Promise<void>} Fulfilled promise on success, rejected promise on failure\n     */\n    setOptions(photoSettings = {}) {\n      return new Promise(function executorSO(resolve, reject) {\n        // TODO\n      });\n    }\n\n    /**\n     * TODO\n     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-takephoto\n     * @return {Promise<Blob>} Fulfilled promise with [Blob](https://www.w3.org/TR/FileAPI/#blob)\n     * argument on success; rejected promise on failure\n     */\n    takePhoto() {\n      const self = this;\n      return new Promise(function executorTP(resolve, reject) {\n        // `If the readyState of the MediaStreamTrack provided in the constructor is not live,\n        // return a promise rejected with a new DOMException whose name is \"InvalidStateError\".`\n        if (self._videoStreamTrack.readyState !== 'live') {\n          return reject(new DOMException('InvalidStateError'));\n        }\n        self.videoElementPlaying.then(() => {\n          try {\n            self.canvasElement.width = self.videoElement.videoWidth;\n            self.canvasElement.height = self.videoElement.videoHeight;\n            self.canvas2dContext.drawImage(self.videoElement, 0, 0);\n            self.canvasElement.toBlob(resolve);\n          } catch (error) {\n            reject(new DOMException('UnknownError'));\n          }\n        });\n      });\n    }\n\n    /**\n     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-grabframe\n     * @return {Promise<ImageBitmap>} Fulfilled promise with\n     * [ImageBitmap](https://www.w3.org/TR/html51/webappapis.html#webappapis-images)\n     * argument on success; rejected promise on failure\n     */\n    grabFrame() {\n      const self = this;\n      return new Promise(function executorGF(resolve, reject) {\n        // `If the readyState of the MediaStreamTrack provided in the constructor is not live,\n        // return a promise rejected with a new DOMException whose name is \"InvalidStateError\".`\n        if (self._videoStreamTrack.readyState !== 'live') {\n          return reject(new DOMException('InvalidStateError'));\n        }\n        self.videoElementPlaying.then(() => {\n          try {\n            self.canvasElement.width = self.videoElement.videoWidth;\n            self.canvasElement.height = self.videoElement.videoHeight;\n            self.canvas2dContext.drawImage(self.videoElement, 0, 0);\n            // TODO polyfill https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap for IE\n            resolve(window.createImageBitmap(self.canvasElement));\n          } catch (error) {\n            reject(new DOMException('UnknownError'));\n          }\n        });\n      });\n    }\n  };\n}\n\nwindow.ImageCapture = ImageCapture;\n","import { ImageCapture } from \"image-capture\";\n\nvar imageCapture;\nvar mediaStream;\n\nvar takePhotoButton = document.querySelector(\"button#takePhoto\");\nvar img = document.querySelector(\"img\");\nvar video = document.querySelector(\"video\");\n\nnavigator.mediaDevices\n  .getUserMedia({\n    video: {\n      facingMode: { exact: \"environment\" }\n    }\n  })\n  .then(gotStream)\n  .catch((error) => {\n    console.log(\"getUserMedia error: \", error);\n  });\n\nfunction gotStream(stream) {\n  mediaStream = stream;\n  video.srcObject = stream;\n  video.classList.remove(\"hidden\");\n  imageCapture = new ImageCapture(stream.getVideoTracks()[0]);\n}\n\nfunction takePhoto() {\n  imageCapture\n    .takePhoto()\n    .then(function (blob) {\n      video.classList.add(\"hidden\");\n      img.classList.remove(\"hidden\");\n      img.src = URL.createObjectURL(blob);\n    })\n    .catch(function (error) {\n      alert(\"takePhoto() error: \", error);\n    });\n}\n\ntakePhotoButton.onclick = takePhoto;\n"],"names":["$0e4bd8b916ae6e46$export$d2caa7debd66c3ef","window","ImageCapture","$c02e0243b19c8ca7$var$imageCapture","constructor","videoStreamTrack","kind","DOMException","this","_videoStreamTrack","readyState","_previewStream","MediaStream","videoElement","document","createElement","videoElementPlaying","Promise","resolve","addEventListener","HTMLMediaElement","srcObject","src","URL","createObjectURL","muted","setAttribute","play","canvasElement","canvas2dContext","getContext","getPhotoCapabilities","reject","MediaSettingsRange","current","min","max","exposureCompensation","exposureMode","fillLightMode","focusMode","imageHeight","imageWidth","iso","redEyeReduction","whiteBalanceMode","zoom","setOptions","photoSettings","takePhoto","self","then","width","videoWidth","height","videoHeight","drawImage","toBlob","error","grabFrame","createImageBitmap","$c02e0243b19c8ca7$var$takePhotoButton","querySelector","$c02e0243b19c8ca7$var$img","$c02e0243b19c8ca7$var$video","navigator","mediaDevices","getUserMedia","video","facingMode","exact","stream","classList","remove","getVideoTracks","catch","console","log","onclick","blob","add","alert"],"version":3,"file":"index.f0ba54f1.js.map"}